/*
 * Grunt-Multi: Run Grunt task with multi-configuration.
 */
var Util = require( '../lib/utils' );

module.exports = function (grunt) {

    grunt.registerMultiTask( 'multi', 'Run Grunt task with multi-configuration.', function () {

        // Multi works only if --multi is specified.
        if( grunt.option( 'multi' ) ){

            var done = this.async();

            /**
             * Check if this thread is generated by Multi.
             */
            if( grunt.option( 'multi-single' ) ){

                console.log( '\n' );
                grunt.log.ok( 'A single thread begin:' );
                console.log( '\n' );

                // Get the raw config and try to update.
                var rawConfig = grunt.config.getRaw();
                // Get the special config
                var singleCfg = JSON.parse( decodeURIComponent( grunt.option( 'multi-cfg' ) ) );

                // If --debug is provided.
                if( grunt.util._.indexOf( process.argv, '--debug' ) >= 0 ){
                    console.log( '\033[1;32m--------- Configuration --------\033[0m\n' );
                    grunt.util._.each( singleCfg, function( value, key ){
                        console.log( '\033[1;33m' + key + ':', value + '\033[0m' );
                    });
                    console.log( '\033[1;32m\n--------------------------------\033[0m\n' );
                }

                // Combine with the raw config.
                grunt.util._.each(singleCfg, function( value, key ){
                    rawConfig[ key ] = value;
                });

                // Replace the origin config.
                grunt.config.init( rawConfig );

                // Finish, just let it go.
                done();
            }
            else {
                grunt.log.ok( 'Begin Multi tasks.' );

                // Get the raw `multi` config, in case the glob-patterns have been replaced by grunt automatically.
                var options = grunt.config.getRaw( this.name )[ this.target ].options;
                var vars = options.vars;
                // Stringify the config, to simplify the template process.
                var configStr = JSON.stringify( options.config );
                // All the var lists go here
                var varList = {};
                /**
                 * All the data for template config goes here
                 * As we the varList would be like:
                 *  { a: [ 1, 2 ], b: [ 3, 4 ] }
                 * The configData based on that, and get the structure like:
                 *  [ { a: 1, b: 3 }, { a: 2, b: 4 } ]
                 */
                var configDatas = [];
                /**
                 * The final config List, the structure is much like configData, but without template within its value.
                 * @type {Array}
                 */
                var configs = [];

                grunt.util._.each( vars, function( value, key ){

                    // If a constant value.
                    if( grunt.util._.isString( value ) ){
                        varList[ key ] = [value];
                    }
                    // If a specify config list.
                    else if ( grunt.util._.isArray( value ) ){
                        varList[ key ] = value;
                    }
                    // If a function provided, it must return a list.
                    else if( grunt.util._.isFunction( value ) ){
                        varList[ key ] = value();
                    }
                    // If use glob
                    else if( grunt.util._.isObject( value ) ){
                        varList[ key ] = grunt.file.expand( value.options || {}, value.patterns );
                    }
                    else {
                        varList[ key ] = [];
                    }
                });

                grunt.util._.each( varList, function( list, key ){

                    list.forEach(function( v, index ){

                        if( !configDatas[ index ] ){
                            configDatas[ index ] = {};
                        }

                        configDatas[ index ][ key ] = v;
                    });
                });

                // Fill the list if a value type is constant.
                grunt.util._.each( vars, function( value, key ){
                    if( grunt.util._.isString( value ) ){
                        configDatas.forEach(function( cfg ){
                            cfg[ key ] = value;
                        });
                    }
                });

                // Render the configs.
                configDatas.forEach(function( data, index ){
                    var config = grunt.template.process( configStr, { data: data } );
                    configs.push( JSON.parse( config ) );
                });

                // Let's roll!
                grunt.util._.each(configs, function( cfg, index ){

                    /**
                     * Remove the `node` and `grunt` from argvï¼Œand keep the rest as it is.
                     * use `--multi-single` to indicate the thread is a single task generated my Multi.
                     * use `--multi-cfg` to pass the single configuration to child process
                     * note the configuration is stringify and encoded.
                     */
                    var args = process.argv.slice( 2 ).concat( [ '--multi=true', '--multi-single=true', '--multi-cfg=' + encodeURIComponent(JSON.stringify( cfg ) ) ]);

                    Util.spawn( grunt, {
                        grunt: true,
                        args: args
                    }, function( error, result, code ){
                        if( error ){
                            console.log( '\n\033[1;31mBuild Error: \033[0m\n', error, result, code  );
                        }
                        else {
                            console.log( result.stdout.replace( '\n\u001b[32mDone, without errors.\u001b[39m', '' ) );
                        }
                    }, function( child ){
                        child.stdout.on('data', function (data) {
                            console.log( data.toString( 'utf8') );
                        });
                    });
                });
            }
        }
        else {
            return true;
        }
    });
};
